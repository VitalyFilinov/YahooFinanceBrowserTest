<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:views="com.vit.yahoobrowser.views.*"
				   currentState="favorites" borderColor="#000000"
				   width="100%" height="100%">
	<s:states>
		<s:State name="industries"/>
		<s:State name="favorites"/>
	</s:states>
	
	<fx:Script>
		<![CDATA[
			/**
			 * IndustryListView is created and used as a View of the project robotlegs structure.
			 * IndustryListView shows the industries list.
			 * There are two states used in:
			 * - industries
			 * - favorites.
			 * The industries state shows the list of all industires or
			 * the list of found industries if the search is processed.
			 * The industries list uses IndustryItemRenderer to render items.
			 * The save button and cancel button shows in the industries state only.
			 * 
			 * The favorites state shows the list of favorite industries.
			 * The favorites list uses FavoriteItemRenderer to render items.
			 */
			import com.vit.yahoobrowser.events.YahooFavoritesEvent;
			import com.vit.yahoobrowser.views.renderers.IndustryItemRenderer;
			import mx.collections.ArrayList;
			import mx.collections.IList;
			
			/**
			 * The data provider for the industries list.
			 */
			[Bindable]
			private var industriesDataProvider:IList = new ArrayList();
			
			/**
			 * The data provider for the favorites list.
			 */
			[Bindable]
			private var favoritesDataProvider:IList = new ArrayList();
			
			/**
			 * Sets current data provider for the industries list.
			 * @param	provider:IList - the data provider to be used as current data provider for the industries list.
			 * @param	invokeBrowser:Boolean - shows whether the industry state must be set or not.
			 */
			public function setIndustriesDataProvider(provider:IList, invokeBrowser:Boolean = false):void
			{
				industriesDataProvider = provider;
				
				if(invokeBrowser && currentState != "industries")
				{
					setIndustriesState();
				}
			}
			
			/**
			 * Returns current data provider for the industries list.
			 */
			public function getIndustriesDataProvider():IList
			{
				return industriesDataProvider;
			}
			
			/**
			 * Sets current data provider for the favories list.
			 * @param	provider:IList - the data provider to be used as current data provider for the favorites list
			 */
			public function setFavoritesDataProvider(provider:IList):void
			{
				favoritesDataProvider = provider;
			}
			
			/**
			 * Sets 'industries' state.
			 */
			private function setIndustriesState():void
			{
				setCurrentState("industries");
			}
			
			/**
			 * Sets 'favorites' state.
			 */
			private function setFavoritesState():void
			{
				setCurrentState("favorites");
			}
			
			/**
			 * Handles save button click and dispatches event.
			 */
			protected function saveClickHandler(event:MouseEvent):void
			{
				dispatchEvent(new YahooFavoritesEvent(YahooFavoritesEvent.SAVE));
				setFavoritesState();
			}
			
			/**
			 * Handles cancel button click and dispatches event.
			 */
			protected function cancelClickHandler(event:MouseEvent):void
			{
				dispatchEvent(new YahooFavoritesEvent(YahooFavoritesEvent.RESET));
				setFavoritesState();
			}
			
			/**
			 * Switches states.
			 */
			public function invokeIndustriesState():void
			{
				if(currentState == "industries")
				{
					setFavoritesState();
				}
				else
				{
					setIndustriesState();
				}
			}
			
			/**
			 * Removes the busy indicator.
			 * In our case the industries data is loaded only once.
			 * When the industries data is loaded the busy indicator has to be removed at all.
			 */
			public function setDataLoaded():void
			{
				if(busyIndicator && busyIndicator.parent)
				{
					removeElement(busyIndicator);
				}
			}
			
		]]>
	</fx:Script>
	
	<!-- Favorites data group with scroller -->
	<s:Scroller horizontalScrollPolicy="off" top="4" right="4" bottom="4" left="4" includeIn="favorites">
		<s:DataGroup id="favoritesList" width="100%" height="100%"
					 		dataProvider="{favoritesDataProvider}"
							itemRenderer="com.vit.yahoobrowser.views.renderers.FavoriteItemRenderer">
			<s:layout>
				<s:VerticalLayout gap="1"/>
			</s:layout>
		</s:DataGroup>
	</s:Scroller>
		
	<!-- Industries data group with scroller -->
	<s:Scroller horizontalScrollPolicy="off" top="4" right="4" bottom="38" left="4" includeIn="industries">
		<s:DataGroup id="industriesList" width="100%" height="100%"
							dataProvider="{industriesDataProvider}"
							itemRenderer="com.vit.yahoobrowser.views.renderers.IndustryItemRenderer">
			<s:layout>
				<s:VerticalLayout gap="1" useVirtualLayout="true"/>
			</s:layout>
		</s:DataGroup>
	</s:Scroller>
	
	<!-- Save and Cancel buttons -->
	<s:Group left="-1" right="-2" bottom="-1" includeIn="industries">
		<s:layout>
			<s:HorizontalLayout id="btnLayout" gap="-1"/>
		</s:layout>
		<views:IndustryManagerListButton id="saveBtn" label="Save" width="50%" height="34" click="saveClickHandler(event)"/>
		<views:IndustryManagerListButton id="cancelBtn" label="Cancel" width="50%" height="34" click="cancelClickHandler(event)"/>
	</s:Group>

	<!-- Busy indicator -->
	<views:BusyIndicator id="busyIndicator" horizontalCenter="0" verticalCenter="0" visible.favorites="false" visible.industries="true"/>
	
</s:BorderContainer>
