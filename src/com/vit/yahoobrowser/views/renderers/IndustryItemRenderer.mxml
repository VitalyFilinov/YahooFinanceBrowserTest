<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx"
				autoDrawBackground="false"
				rollOver="rollOverHandler(event)"
				rollOut="rollOutHandler(event)"
				creationComplete="updateState(event)"
				dataChange="updateState(event)"
				width="100%">
	
	<s:states>
		<s:State name = "sectorOverOn"		stateGroups="overOn, sector, on, over"/>
		<s:State name = "sectorOverOff"		stateGroups="overOff, sector, off, over"/>
		<s:State name = "sectorOutOn"		stateGroups="outOn, sector, on, out"/>
		<s:State name = "sectorOutOff"		stateGroups="outOff, sector, off, out"/>
		
		<s:State name = "industryOverOn"	stateGroups="overOn, industry, on, over"/>
		<s:State name = "industryOverOff"	stateGroups="overOff, industry, off, over"/>
		<s:State name = "industryOutOn"		stateGroups="outOn, industry, on, out"/>
		<s:State name = "industryOutOff"	stateGroups="outOff, industry, off, out"/>
	</s:states>
	
	<fx:Script>
		<![CDATA[
			import com.vit.yahoobrowser.events.YahooIndustryEvent;
			import com.vit.yahoobrowser.events.YahooFavoritesEvent;
			import com.vit.yahoobrowser.models.vo.IIndustryVO;
			import com.vit.yahoobrowser.resources.Resources;
			
			private var isOn:Boolean = false;
			private var isMouseOver:Boolean = false;
			private var isSector:Boolean = false;
			
			private var vo:IIndustryVO;
			
			override public function set data(value:Object):void
			{
				if(value == null)
				{
					// TODO Why null???
					return;
				}
				vo = value as IIndustryVO;
				super.data = vo.name;
				
				updateState();
			}
			
			protected function clickHandler(event:MouseEvent):void
			{
				if(isSector)
				{
					dispatchEvent(new YahooIndustryEvent(isOn? YahooIndustryEvent.SECTOR_CLOSE:YahooIndustryEvent.SECTOR_OPEN, true));
				}
				else
				{
					dispatchEvent(new YahooFavoritesEvent(isOn? YahooFavoritesEvent.REMOVE:YahooFavoritesEvent.ADD, vo, true));
				}
				
				updateState();
			}
			
			protected function rollOverHandler(event:MouseEvent):void
			{
				isMouseOver = true;
				updateState();
			}
			
			protected function rollOutHandler(event:MouseEvent):void
			{
				isMouseOver = false;
				updateState();
			}
			
			private function updateState(event:Event = null):void
			{
				isSector = vo.children && vo.children.length > 0;
				isOn = isSector? vo.isOpened:vo.isFavorite;
				
				var newState:String = 
					(isSector? "sector":"industry") +
					(isMouseOver? "Over":"Out") +
					(isOn? "On":"Off");
				
				setCurrentState(newState);
			}
			
		]]>
	</fx:Script>
	
	<s:Rect right="0" top="-1" bottom="-1"
			left.sectorOverOff="0" left.sectorOverOn="0"
			left.industryOverOff="13" left.industryOverOn="13"
			includeIn="over">
		<s:fill>
			<s:SolidColor color="#F0F0F0"/>
		</s:fill>
	</s:Rect>
	
	<s:Label id="itemLabel" text="{data}" fontSize="12" top="4" width="100%"
			 paddingLeft="15" paddingRight = "24"/>
	
	<s:Image id="plusImg" source="{Resources.PLUS}" top="3"
			 includeIn="sectorOverOff, sectorOutOff" click="clickHandler(event)"/>
	<s:Image id="minusImg" source="{Resources.MINUS}" top="3"
			 includeIn="sectorOverOn, sectorOutOn" click="clickHandler(event)"/>
	
	<s:Image id="yesImg" source="{Resources.CHECKBOX_YES}" top="1" right="4"
			 includeIn="industryOverOn, industryOutOn" click="clickHandler(event)"/>
	<s:Image id="noImg" source="{Resources.CHECKBOX_NO}" top="1" right="4"
			 includeIn="industryOverOff, industryOutOff" click="clickHandler(event)"/>
	
</s:ItemRenderer>
