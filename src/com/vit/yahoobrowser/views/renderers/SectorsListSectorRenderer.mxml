<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:views="com.vit.yahoobrowser.views.*"
				autoDrawBackground="false" width="100%"
				mouseEnabled="false">
	<s:states>
		<s:State name = "normal" basedOn="normalClosed"/> 
		<s:State name = "hovered" basedOn="hoveredClosed"/>
		<s:State name = "selected"/>
		<s:State name = "normalClosed"/>
		<s:State name = "hoveredClosed"/>
		<s:State name = "normalOpened"/>
		<s:State name = "hoveredOpened"/>
	</s:states>
	
	<fx:Script> 
		<![CDATA[
			import com.vit.yahoobrowser.events.YahooDataEvent;
			import com.vit.yahoobrowser.models.vo.IIndustryVO;
			import com.vit.yahoobrowser.models.vo.ISectorVO;
			import com.vit.yahoobrowser.resources.Resources;
			
			import flash.events.Event;
			
			import mx.events.FlexEvent;
			
			private var opened:Boolean = false;
			
			override public function set data(value:Object):void
			{ 
				super.data = value; 
				
				// Check to see if the data property is null. 
				if (value== null) 
					return;
				
				itemLabel.text = ISectorVO(data).name;
				setCurrentState(ISectorVO(data).isOpened? "opened":"closed");
			}
			
			protected function clickHandler(event:MouseEvent):void
			{
				if(opened)
				{
					setCurrentState("closed");
					opened = false;
				}
				else
				{
					setCurrentState("opened");
					opened = true;
				}
				
				trace("CURRENT STATE:", currentState);
					
				/*if(data is ISectorVO)
				{
					dispatchEvent(new Event(YahooDataEvent.SECTOR_SELECTED, true));
				}
				else if(data is IIndustryVO)
				{
					dispatchEvent(new Event(YahooDataEvent.INDUSTRY_SELECTED, true));
				}*/
			}
			
			override public function setCurrentState(stateName:String, playTransition:Boolean=true):void
			{
				if(currentState == null)
				{
					if(stateName == "closed" || stateName == "normal")
					{
						super.setCurrentState("normalClosed");
					}
					else if(stateName == "opened")
					{
						super.setCurrentState("normalOpened");
					}
					else
					{
						// stateName is hovered
						super.setCurrentState("hoveredClosed");
					}
					trace("currentState == null", currentState);
					return;
				}
				
				if(stateName == "opened")
				{
					if(currentState == "hovered"
							|| currentState == "hoveredClosed")
					{
						super.setCurrentState("hoveredOpened");
					}
					else if(currentState == "normal" || currentState == "normalClosed")
					{
						super.setCurrentState("normalOpened");
					}
					else
					{
						// currentState is "hoveredOpened" or "normalOpened"
						// do nothing
					}
					trace("stateName == opened", currentState);
					return;
				}
				
				if(stateName == "closed")
				{
					if(currentState == "hovered" || currentState == "hoveredOpened")
					{
						super.setCurrentState("hoveredClosed");
					}
					else if(currentState == "normal" || currentState == "normalOpened")
					{
						super.setCurrentState("normalClosed");
					}
					else
					{
						// currentState is "hoveredClosed" or "normalClosed"
						// do nothing
					}
					trace("stateName == closed", currentState);
					return;
				}
				
				if(stateName == "normal")
				{
					if(currentState == "hovered" 
							|| currentState == "normal"
							|| currentState == "hoveredClosed"
							|| currentState == "normalClosed")
					{
						super.setCurrentState("normalClosed");
					}
					else if(currentState == "hoveredOpened")
					{
						super.setCurrentState("normalOpened");
					}
					trace("stateName == normal", currentState);
					return;
				}
				
				if(stateName == "hovered")
				{
					if(currentState == "normal" 
							|| currentState == "hovered"
							|| currentState == "normalClosed"
							|| currentState == "hoveredClosed")
					{
						super.setCurrentState("hoveredClosed");
					}
					else if(currentState == "normalOpened")
					{
						super.setCurrentState("hoveredOpened");
					}
					trace("stateName == hovered", currentState);
					return;
				}
				
				
				super.setCurrentState(stateName, playTransition);
				trace("stateName == ANOTHER", stateName, currentState);
			}
			
			protected function childrensCreated(event:FlexEvent):void
			{
				trace("----------> childrensCreated");
				childrenList.setData(ISectorVO(data).industries);
			}
			
			
			
		]]> 
	</fx:Script>
	
	<s:Rect width="100%" height="{itemLabel.height + 6}" includeIn="hoveredOpened, hoveredClosed">
		<s:fill>
			<s:SolidColor color="#F0F0F0"/>
		</s:fill>
	</s:Rect>
	
	<s:Group width="100%">
		<s:layout>
			<s:VerticalLayout gap="2"/>
		</s:layout>
		<s:Group width="100%" height="{itemLabel.height + 6}">
			<s:layout>
				<s:HorizontalLayout gap="4" verticalAlign="middle"/>
			</s:layout>
			<s:Image source="{Resources.PLUS}" includeIn="normalClosed, hoveredClosed, hovered" click="clickHandler(event)"/>
			<s:Image source="{Resources.MINUS}" includeIn="normalOpened, hoveredOpened" click="clickHandler(event)"/>
			<s:Group>
				<s:Label id="itemLabel" text="Undefined" fontSize="12" top="4"/>
			</s:Group>
		</s:Group>
		<s:Group width="100%">
			<views:SectorsListView id="childrenList" width="100%" visible.normalOpened="true" visible.hoveredOpened="true" visible.normalClosed="false" visible.hoveredClosed="false" creationComplete="childrensCreated(event)" mouseEnabled="false" mouseChildren="true"/>
		</s:Group>
	</s:Group>
</s:ItemRenderer>
