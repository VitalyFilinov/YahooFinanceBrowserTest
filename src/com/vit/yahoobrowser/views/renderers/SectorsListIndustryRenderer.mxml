<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				click="clickHandler(event)"
				autoDrawBackground="false" width="100%"
				mouseEnabled = "false">
	<s:states>
		<s:State name = "normal"/> 
		<s:State name = "hovered"/>
		<s:State name = "normalUnchecked"/>
		<s:State name = "hoveredUnchecked"/>
		<s:State name = "normalChecked"/>
		<s:State name = "hoveredChecked"/>
	</s:states>
	
	<fx:Script> 
		<![CDATA[ 
			import com.vit.yahoobrowser.events.YahooDataEvent;
			import com.vit.yahoobrowser.models.vo.IIndustryVO;
			import com.vit.yahoobrowser.resources.Resources;
			
			private var shown:Boolean = true;
			private var savedHeight:int = -1;
			
			override public function set data(value:Object):void { 
				super.data = value; 
				
				// Check to see if the data property is null. 
				if (value== null) 
					return; 
				
				itemLabel.text = IIndustryVO(data).name;
				setCurrentState(IIndustryVO(data).isFavorite? "checked":"unchecked");
			}
			
			protected function clickHandler(event:MouseEvent):void
			{
				dispatchEvent(new Event(YahooDataEvent.INDUSTRY_SELECTED, true));
			}
			
			protected function onCheckBoxClick(event:MouseEvent):void
			{
				if(IIndustryVO(data).isFavorite)
				{
					dispatchEvent(new Event(YahooDataEvent.INDUSTRY_UNCHECKED, true));
				}
				else
				{
					dispatchEvent(new Event(YahooDataEvent.INDUSTRY_CHECKED, true));
				}
				
				//TODO REMOVE TO MODEL
				IIndustryVO(data).isFavorite = !IIndustryVO(data).isFavorite;
				setCurrentState(IIndustryVO(data).isFavorite? "checked":"unchecked");
			}
			
			override public function setCurrentState(stateName:String, playTransition:Boolean=true):void
			{
				if(currentState == null)
				{
					if(stateName == "unchecked" || stateName == "normal")
					{
						super.setCurrentState("normalUnchecked");
					}
					else if(stateName == "checked")
					{
						super.setCurrentState("normalChecked");
					}
					else
					{
						// stateName is hovered
						super.setCurrentState("hoveredUnchecked");
					}
					return;
				}
				
				if(stateName == "checked")
				{
					if(currentState == "hovered"
						|| currentState == "hoveredUnchecked")
					{
						super.setCurrentState("hoveredChecked");
					}
					else if(currentState == "normal" || currentState == "normalUnchecked")
					{
						super.setCurrentState("normalChecked");
					}
					else
					{
						// currentState is "hoveredChecked" or "normalChecked"
						// do nothing
					}
					return;
				}
				
				if(stateName == "unchecked")
				{
					if(currentState == "hovered" || currentState == "hoveredChecked")
					{
						super.setCurrentState("hoveredUnchecked");
					}
					else if(currentState == "normal" || currentState == "normalChecked")
					{
						super.setCurrentState("normalUnchecked");
					}
					else
					{
						// currentState is "hoveredUnchecked" or "normalUnchecked"
						// do nothing
					}
					return;
				}
				
				if(stateName == "normal")
				{
					if(currentState == "hovered" 
						|| currentState == "normal"
						|| currentState == "hoveredUnchecked"
						|| currentState == "normalUnchecked")
					{
						super.setCurrentState("normalUnchecked");
					}
					else if(currentState == "hoveredChecked")
					{
						super.setCurrentState("normalChecked");
					}
					return;
				}
				
				if(stateName == "hovered")
				{
					if(currentState == "normal" 
						|| currentState == "hovered"
						|| currentState == "normalUnchecked"
						|| currentState == "hoveredUnchecked")
					{
						super.setCurrentState("hoveredUnchecked");
					}
					else if(currentState == "normalChecked")
					{
						super.setCurrentState("hoveredChecked");
					}
					return;
				}
			}
			
		]]> 
	</fx:Script>
	
	<s:Rect left="18" right="2" height="{itemLabel.height + 6}" includeIn="hoveredChecked, hoveredUnchecked">
		<s:fill>
			<s:SolidColor color="#F0F0F0"/>
		</s:fill>
	</s:Rect>
	
	<s:Group width="100%" height="{itemLabel.height + 6}">
		<s:Group left="20" right="23">
			<s:Label id="itemLabel" text="Undefined" fontSize="11" width="100%" top="4"/>
		</s:Group>
		<s:Image source="{Resources.CHECKBOX_YES}" includeIn="normalChecked, hoveredChecked" click="onCheckBoxClick(event)" top="1" right="4"/>
		<s:Image source="{Resources.CHECKBOX_NO}" includeIn="normalUnchecked, hoveredUnchecked, hovered" click="onCheckBoxClick(event)" top="1" right="4"/>
	</s:Group>
	
</s:ItemRenderer>
