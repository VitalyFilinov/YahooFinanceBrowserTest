<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:views="com.vit.yahoobrowser.views.*"
				autoDrawBackground="false"
				width="100%" currentState="closedOut">
	
	<s:states>
		<s:State name = "openedOver"/>
		<s:State name = "closedOver"/>
		<s:State name = "openedOut"/>
		<s:State name = "closedOut"/>
	</s:states>
	
	<fx:Script>
		<![CDATA[
			import com.vit.yahoobrowser.models.vo.ISectorVO;
			import com.vit.yahoobrowser.resources.Resources;
			import com.vit.yahoobrowser.views.SectorsList;
			import com.vit.yahoobrowser.events.YahooDataEvent;
			
			import mx.events.FlexEvent;
			
			private var isOpened:Boolean = false;
			private var isMouseOver:Boolean = false;
			private var childrenList:SectorsList;
			
			private var vo:ISectorVO;
			
			override public function set data(value:Object):void
			{
				vo = ISectorVO(value);
				super.data = vo.name;
				
				isOpened = vo.isOpened;
				updateState();
			}
			
			protected function onIconClick(event:MouseEvent):void
			{
				isOpened = !isOpened;
				
				
				
				/*if(isOpened)
				{
					if(!childrenList)
					{
						createChildrenList();
					}
					
					childrensContainer.visible = true;
					childrensContainer.scaleY = 1;
				}
				else
				{
					childrensContainer.visible = false;
					childrensContainer.scaleY = 0;
				}*/
				
				updateState();
				
				dispatchEvent(new YahooDataEvent(isOpened? YahooDataEvent.SECTOR_OPEN : YahooDataEvent.SECTOR_CLOSE, true));
			}
			
			private function createChildrenList():void
			{
				childrenList = new SectorsList();
				//childrenList.itemRenderer = new ClassFactory(DefaultItemRenderer);
				childrenList.itemRenderer = new ClassFactory(IndustryRenderer);
				childrenList.percentWidth = 100;
				
				var childrenNames:Array = [];
				var i:int = vo.industries.length;
				
				while(i--)
				{
					childrenNames[childrenNames.length] = vo.industries[i].name;
				}
				
				childrenNames.reverse();
				//childrenList.setData(childrenNames);
				//childrenList.setData(vo.industries);
				childrensContainer.addElement(childrenList);
				
				childrenNames = [];
				childrenNames = null;
			}
			
			protected function rollOverHandler(event:MouseEvent):void
			{
				isMouseOver = true;
				updateState();
			}
			
			protected function rollOutHandler(event:MouseEvent):void
			{
				isMouseOver = false;
				updateState();
			}
			
			private function updateState():void
			{
				if(isMouseOver)
				{
					setCurrentState(isOpened? "openedOver" : "closedOver");
				}
				else
				{
					setCurrentState(isOpened? "openedOut" : "closedOut");
				}
			}
			
			protected function onChildrenComplete(event:FlexEvent):void
			{
				var childrenNames:Array = [];
				var i:int = vo.industries.length;
				
				while(i--)
				{
					childrenNames[childrenNames.length] = vo.industries[i].name;
				}
				
				childrenNames.reverse();
				childrenList.setData(childrenNames);
				
				childrenNames = [];
				childrenNames = null;
			}
			
		]]>
	</fx:Script>
	
	<s:Group width="100%">
		<s:layout>
			<s:VerticalLayout gap="2"/>
		</s:layout>
		
		<s:Group width="100%" id="mouseHandler" rollOver="rollOverHandler(event)" rollOut="rollOutHandler(event)">
			
			<s:Rect width="100%" height="{itemLabel.height + 6}" includeIn="openedOver, closedOver">
				<s:fill>
					<s:SolidColor color="#F0F0F0"/>
				</s:fill>
			</s:Rect>
			
			<s:Group id="itemView" width="100%" height="{itemLabel.height + 6}" top="4">
				<s:Image id="plusImg" source="{Resources.PLUS}" includeIn="closedOver, closedOut" click="onIconClick(event)"/>
				<s:Image id="minusImg" source="{Resources.MINUS}" includeIn="openedOver, openedOut" click="onIconClick(event)"/>
				
				<s:Label id="itemLabel" text="{data}" fontSize="12" left="{plusImg.width + 4}" right="4"/>
				
			</s:Group>
		
		</s:Group>
	
		<s:Group id="childrensContainer" width="100%">
			<!--views:SectorsList id="childrenList" width="100%"
							   itemRenderer="com.vit.yahoobrowser.views.renderers.IndustryRenderer" creationComplete="onChildrenComplete(event)" /-->
		</s:Group>
	</s:Group>
	
</s:ItemRenderer>
